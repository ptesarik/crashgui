The crashgui protocol
---------------------
The basic blocks of the protocol were taken from the IMAP4 protocol
(see RFC3501), because:

1. I didn't want to re-invent the wheel.
2. The IMAP4 protocol can transmit binary blobs efficiently.
3. The protocol can handle multiple requests in parallel.

However, the set of commands is completely different from IMAP (because
you're not accessing a mailbox, obviously).

Commands
--------

* DISCONNECT command

   Arguments:  none

   Responses:  REQUIRED untagged response: BYE

   Result:     OK - disconnect completed
               BAD - command unknown or arguments invalid

      The DISCONNECT command informs the server that the client is done
      with the connection.  The server MUST send a BYE untagged response
      before the (tagged) OK response, and then close the network
      connection.

   Example:    C: A024 DISCONNECT
               S: * BYE connection closing
               S: A024 OK DISCONNECT completed
               (Server and client then close the connection)

* TERMINATE command

   Arguments:  none

   Responses:  REQUIRED untagged response: BYE

   Result:     OK - disconnect completed
               BAD - command unknown or arguments invalid

      The TERMINATE command requests the server to terminate. Since
      the server no longer runs after this command completes, this
      command also terminates the current connection.  The server
      MUST send a BYE untagged response before the (tagged) OK response,
      and then close the network connection.

   Example:    C: A025 TERMINATE
               S: * BYE terminating crashgui server
               S: A025 OK TERMINATE completed
               (Server and client then close the connection)

* COMMAND command

   Arguments:  command line to execute

   Responses:  REQUIRED untagged responses: COMMAND

   Result:     OK - command was executed
               NO - the command could not be executed
               BAD - command unknown or arguments invalid

      The COMMAND command executes a given crash command line and sends
      the output back as a string (usually a literal).

   Example:    C: A006 COMMAND "net"
               S: * DUMP {148}
               S: NET_DEVICE  NAME   IP ADDRESS(ES)
               S:  f4978800   lo     127.0.0.1
               S:  f6af8000   eth0   192.168.84.68
               S:  f41bf000   wlan0  
               S:  c8a85000   tun0   10.100.200.1
               S: A006 OK COMMAND completed

* READMEM command

   Arguments:  start address
               byte count
               OPTIONAL memory type

   Responses:  REQUIRED untagged responses: DUMP

   Result:     OK - memory dump completed
               NO - the specified memory location cannot be read
               BAD - command unknown or arguments invalid

      The READMEM command reads a chunk of memory and sends it as a string
      (usually a literal). The arguments are interpreted as hexadecimal
      numbers. The currently defined memory types are:

      KVADDR
         Kernel virtual address. This is the default if no memory type is
         specified.

      UVADDR
         User-space virtual address.

      PHYSADDR
         Physical address.

      XENMACHADDR
         Machine address (Xen only).

      FILEADDR
         File address.

   Example:    C: A026 READMEM c009bf2c 34
               S: * DUMP c009bf2c {52}
               S: <52 (that is 0x34) bytes of binary dump>
               S: A026 OK DUMP completed

* SYMBOL command

   Arguments:  symbol name

   Responses:  REQUIRED untagged responses: SYMBOL

   Result:     OK - symbol translated to address
               NO - no symbols with the given name could be found
               BAD - command unknown or arguments invalid

      The SYMBOL command looks up a symbol's kernel virtual address.
      All numbers in the response are hexadecimal.

   Example:    C: A007 SYMBOL "linux_banner"
               S: * SYMBOL c07070a0 c0 R "linux_banner"
               S: A007 OK SYMBOL completed

* ADDRESS command

   Arguments:  kernel virtual address

   Responses:  REQUIRED untagged responses: SYMBOL

   Result:     OK - address translated to a symbol
               NO - no symbols could be found for the address
               BAD - command unknown or arguments invalid

      The ADDRESS command translates a kernel virtual address to a symbol.
      The argument is interpreted as a hexadecimal kernel virtual address.
      All numbers in the response are hexadecimal.

   Example:    C: A027 ADDRESS c07070a0
               S: * SYMBOL c07070a0 c0 R "linux_banner"
               S: A027 OK ADDRESS completed

* PID command

   Arguments:  process ID

   Responses:  REQUIRED untagged responses: TASK

   Result:     OK - task(s) with a given PID described
               NO - the specified PID was not found
               BAD - command unknown or arguments invalid

      The PID command searches the process list for the given PID and
      sends back the corresponding TASK objects. The PID is interpreted
      as a decimal unsigned integer.

   Example:    C: A028 PID 1
               S: * TASK f4876ce0 f4878000 1 "systemd" 1 c0a59060 f419ec40
               S: A028 OK PID completed

Responses
---------

* OK Response

   Contents:   OPTIONAL response code
               human-readable text

      The OK response indicates an information message from the server.
      When tagged, it indicates successful completion of the associated
      command. The human-readable text MAY be presented to the user as
      an information message. The untagged form indicates an
      information-only message; the nature of the information MAY be
      indicated by a response code.

      The untagged form is also used as a greeting at connection startup.

   Example:    S: * OK [PROTOCOL=0.1] crashgui server ready.

7.1.2.  NO Response

   Contents:   OPTIONAL response code
               human-readable text

      The NO response indicates an operational error message from the
      server.  When tagged, it indicates unsuccessful completion of the
      associated command. The untagged form indicates a warning; the
      command can still complete successfully. The human-readable text
      describes the condition.

   Example:    C: A101 PID 16
               S: A101 NO PID not found

7.1.3.  BAD Response

   Contents:   OPTIONAL response code
               human-readable text

      The BAD response indicates an error message from the server. When
      tagged, it reports a protocol-level error in the client's command;
      the tag indicates the command that caused the error. The untagged
      form indicates a protocol-level error for which the associated
      command can not be determined; it can also indicate an internal
      server failure. The human-readable text describes the condition.

   Example:    C: ...empty line...
               S: * BAD Missing tag
               C: A102 BABBLE
               S: A102 BAD Unknown protocol command.

* BYE Response

   Contents:   OPTIONAL response code
               human-readable text

      The BYE response is always untagged, and indicates that the server
      is about to close the connection.  The human-readable text MAY be
      displayed to the user in a status report by the client. The BYE
      response is sent under one of two conditions:

         1) as part of a normal disconnect sequence. The server will close
            the connection after sending the tagged OK response to the
            DISCONNECT or TERMINATE command.

         2) as a shutdown announcement. The server closes the connection
            immediately.

      The difference between a BYE that occurs as part of a normal
      LOGOUT sequence (the first case) and a BYE that occurs because of
      a failure (the other three cases) is that the connection closes
      immediately in the failure case.  In all cases the client SHOULD
      continue to read response data from the server until the
      connection is closed; this will ensure that any pending untagged
      or completion responses are read and processed.

   Example:    S: * BYE Server terminating

* TASK response

   Contents:   address of struct task_struct (hexadecimal)
               address of struct thread_info (hexadecimal)
               PID (decimal)
               command name (string)
               processor number (decimal)
               address of parent struct task_struct (hexadecimal)
               address of struct mm_struct (hexadecimal)

      The TASK response occurs as a result of a PID command.
      It returns the description of a single task with a given PID. There
      can be multiple TASK responses for a single PID command.

   Example:    S: * TASK f491cfa0 f491e000 22 "netns" 1 f4876030 0

Authentication
--------------
There is no authentication. The crashgui protocol is designed to operate
on UNIX-domain sockets, so the normal system permissions apply.
